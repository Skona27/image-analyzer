{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createMachine, assign } from \"xstate\";\nimport { Camera } from \"expo-camera\";\nvar Options = {\n  services: {\n    grantPermissions: \"grantPermissions\"\n  },\n  actions: {\n    setSnap: \"setSnap\"\n  }\n};\nexport var machine = createMachine({\n  id: \"machine\",\n  strict: true,\n  initial: \"init\",\n  context: {\n    hasPermissions: false,\n    snap: null\n  },\n  states: {\n    init: {\n      invoke: {\n        src: Options.services.grantPermissions,\n        onDone: {\n          actions: assign({\n            hasPermissions: function hasPermissions() {\n              return true;\n            }\n          }),\n          target: \"ready\"\n        },\n        onError: {\n          target: \"error\"\n        }\n      }\n    },\n    ready: {\n      on: {\n        OPEN_CAMERA: {\n          target: \"camera\"\n        }\n      }\n    },\n    camera: {\n      on: {\n        SAVE_SNAP: {\n          target: \"processing\",\n          actions: Options.actions.setSnap\n        }\n      }\n    },\n    processing: {},\n    result: {},\n    error: {}\n  }\n}, {\n  services: _defineProperty({}, Options.services.grantPermissions, function _callee() {\n    var _await$Camera$request, status;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Camera.requestPermissionsAsync());\n\n          case 2:\n            _await$Camera$request = _context.sent;\n            status = _await$Camera$request.status;\n            return _context.abrupt(\"return\", status === \"granted\");\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }),\n  actions: _defineProperty({}, Options.actions.setSnap, assign({\n    snap: function snap(_, event) {\n      return event.data;\n    }\n  }))\n});","map":{"version":3,"sources":["C:/Users/jakub/Desktop/Projects/image-analyzer/client/machine.ts"],"names":["createMachine","assign","Camera","Options","services","grantPermissions","actions","setSnap","machine","id","strict","initial","context","hasPermissions","snap","states","init","invoke","src","onDone","target","onError","ready","on","OPEN_CAMERA","camera","SAVE_SNAP","processing","result","error","requestPermissionsAsync","status","_","event","data"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,MAAxB,QAAmD,QAAnD;AACA,SAASC,MAAT,QAA8C,aAA9C;AAkBA,IAAMC,OAAO,GAAG;AACdC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,gBAAgB,EAAE;AADV,GADI;AAIdC,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAE;AADF;AAJK,CAAhB;AASA,OAAO,IAAMC,OAAO,GAAGR,aAAa,CAClC;AACES,EAAAA,EAAE,EAAE,SADN;AAEEC,EAAAA,MAAM,EAAE,IAFV;AAGEC,EAAAA,OAAO,EAAE,MAHX;AAIEC,EAAAA,OAAO,EAAE;AACPC,IAAAA,cAAc,EAAE,KADT;AAEPC,IAAAA,IAAI,EAAE;AAFC,GAJX;AAQEC,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAE;AACJC,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAEf,OAAO,CAACC,QAAR,CAAiBC,gBADhB;AAENc,QAAAA,MAAM,EAAE;AACNb,UAAAA,OAAO,EAAEL,MAAM,CAAC;AACdY,YAAAA,cAAc,EAAE;AAAA,qBAAM,IAAN;AAAA;AADF,WAAD,CADT;AAINO,UAAAA,MAAM,EAAE;AAJF,SAFF;AAQNC,QAAAA,OAAO,EAAE;AACPD,UAAAA,MAAM,EAAE;AADD;AARH;AADJ,KADA;AAeNE,IAAAA,KAAK,EAAE;AACLC,MAAAA,EAAE,EAAE;AACFC,QAAAA,WAAW,EAAE;AACXJ,UAAAA,MAAM,EAAE;AADG;AADX;AADC,KAfD;AAsBNK,IAAAA,MAAM,EAAE;AACNF,MAAAA,EAAE,EAAE;AACFG,QAAAA,SAAS,EAAE;AACTN,UAAAA,MAAM,EAAE,YADC;AAETd,UAAAA,OAAO,EAAEH,OAAO,CAACG,OAAR,CAAgBC;AAFhB;AADT;AADE,KAtBF;AA8BNoB,IAAAA,UAAU,EAAE,EA9BN;AA+BNC,IAAAA,MAAM,EAAE,EA/BF;AAgCNC,IAAAA,KAAK,EAAE;AAhCD;AARV,CADkC,EA4ClC;AACEzB,EAAAA,QAAQ,sBACLD,OAAO,CAACC,QAAR,CAAiBC,gBADZ,EAC+B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACVH,MAAM,CAAC4B,uBAAP,EADU;;AAAA;AAAA;AAC3BC,YAAAA,MAD2B,yBAC3BA,MAD2B;AAAA,6CAE5BA,MAAM,KAAK,SAFiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAD/B,CADV;AAOEzB,EAAAA,OAAO,sBACJH,OAAO,CAACG,OAAR,CAAgBC,OADZ,EACsBN,MAAM,CAA8B;AAC7Da,IAAAA,IAAI,EAAE,cAACkB,CAAD,EAAIC,KAAJ;AAAA,aAAcA,KAAK,CAACC,IAApB;AAAA;AADuD,GAA9B,CAD5B;AAPT,CA5CkC,CAA7B","sourcesContent":["import { createMachine, assign, Interpreter } from \"xstate\";\r\nimport { Camera, CameraCapturedPicture } from \"expo-camera\";\r\n\r\ntype Context = {\r\n  hasPermissions: boolean;\r\n  snap: CameraCapturedPicture | null;\r\n};\r\n\r\ntype Event = {\r\n  OPEN_CAMERA: { type: \"OPEN_CAMERA\" };\r\n  SAVE_SNAP: { type: \"SAVE_SNAP\"; data: CameraCapturedPicture };\r\n};\r\n\r\ntype ValueOf<T> = T[keyof T];\r\n\r\ntype Service = Interpreter<Context, any, ValueOf<Event>>;\r\n\r\nexport type Send = Service[\"send\"];\r\n\r\nconst Options = {\r\n  services: {\r\n    grantPermissions: \"grantPermissions\",\r\n  },\r\n  actions: {\r\n    setSnap: \"setSnap\",\r\n  },\r\n};\r\n\r\nexport const machine = createMachine<Context, ValueOf<Event>>(\r\n  {\r\n    id: \"machine\",\r\n    strict: true,\r\n    initial: \"init\",\r\n    context: {\r\n      hasPermissions: false,\r\n      snap: null,\r\n    },\r\n    states: {\r\n      init: {\r\n        invoke: {\r\n          src: Options.services.grantPermissions,\r\n          onDone: {\r\n            actions: assign({\r\n              hasPermissions: () => true,\r\n            }),\r\n            target: \"ready\",\r\n          },\r\n          onError: {\r\n            target: \"error\",\r\n          },\r\n        },\r\n      },\r\n      ready: {\r\n        on: {\r\n          OPEN_CAMERA: {\r\n            target: \"camera\",\r\n          },\r\n        },\r\n      },\r\n      camera: {\r\n        on: {\r\n          SAVE_SNAP: {\r\n            target: \"processing\",\r\n            actions: Options.actions.setSnap,\r\n          },\r\n        },\r\n      },\r\n      processing: {},\r\n      result: {},\r\n      error: {},\r\n    },\r\n  },\r\n  {\r\n    services: {\r\n      [Options.services.grantPermissions]: async () => {\r\n        const { status } = await Camera.requestPermissionsAsync();\r\n        return status === \"granted\";\r\n      },\r\n    },\r\n    actions: {\r\n      [Options.actions.setSnap]: assign<Context, Event[\"SAVE_SNAP\"]>({\r\n        snap: (_, event) => event.data,\r\n      }) as any,\r\n    },\r\n  }\r\n);\r\n"]},"metadata":{},"sourceType":"module"}