{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _services;\n\nimport { createMachine, assign } from \"xstate\";\nimport { Camera } from \"expo-camera\";\nvar Options = {\n  services: {\n    grantPermissions: \"grantPermissions\",\n    sendSnap: \"sendSnap\"\n  },\n  actions: {\n    setSnap: \"setSnap\"\n  }\n};\nexport var machine = createMachine({\n  id: \"machine\",\n  strict: true,\n  initial: \"init\",\n  context: {\n    hasPermissions: false,\n    snap: null\n  },\n  states: {\n    init: {\n      invoke: {\n        src: Options.services.grantPermissions,\n        onDone: {\n          actions: assign({\n            hasPermissions: function hasPermissions() {\n              return true;\n            }\n          }),\n          target: \"ready\"\n        },\n        onError: {\n          target: \"error\"\n        }\n      }\n    },\n    ready: {\n      on: {\n        OPEN_CAMERA: {\n          target: \"camera\"\n        }\n      }\n    },\n    camera: {\n      on: {\n        SAVE_SNAP: {\n          target: \"processing\",\n          actions: Options.actions.setSnap\n        }\n      }\n    },\n    processing: {\n      invoke: {\n        src: Options.services.sendSnap,\n        onDone: {\n          target: \"result\"\n        },\n        onError: {\n          target: \"error\"\n        }\n      }\n    },\n    result: {},\n    error: {}\n  }\n}, {\n  services: (_services = {}, _defineProperty(_services, Options.services.grantPermissions, function _callee() {\n    var _await$Camera$request, status;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Camera.requestPermissionsAsync());\n\n          case 2:\n            _await$Camera$request = _context.sent;\n            status = _await$Camera$request.status;\n            return _context.abrupt(\"return\", status === \"granted\");\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }), _defineProperty(_services, Options.services.sendSnap, function _callee2(context) {\n    var _context$snap;\n\n    var data;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"http://192.168.1.100:3001/image\", {\n              method: \"POST\",\n              headers: {\n                \"content-type\": \"application/json; charset=utf-8\"\n              },\n              body: JSON.stringify({\n                image: (_context$snap = context.snap) == null ? void 0 : _context$snap.base64\n              })\n            }));\n\n          case 2:\n            data = _context2.sent;\n            console.log(data);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }), _services),\n  actions: _defineProperty({}, Options.actions.setSnap, assign({\n    snap: function snap(_, event) {\n      return event.data;\n    }\n  }))\n});","map":{"version":3,"sources":["C:/Users/jakub/Desktop/Projects/image-analyzer/client/machine.ts"],"names":["createMachine","assign","Camera","Options","services","grantPermissions","sendSnap","actions","setSnap","machine","id","strict","initial","context","hasPermissions","snap","states","init","invoke","src","onDone","target","onError","ready","on","OPEN_CAMERA","camera","SAVE_SNAP","processing","result","error","requestPermissionsAsync","status","fetch","method","headers","body","JSON","stringify","image","base64","data","console","log","_","event"],"mappings":"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","sourcesContent":["import { createMachine, assign, Interpreter } from \"xstate\";\r\nimport { Camera, CameraCapturedPicture } from \"expo-camera\";\r\n\r\ntype Context = {\r\n  hasPermissions: boolean;\r\n  snap: CameraCapturedPicture | null;\r\n};\r\n\r\ntype Event = {\r\n  OPEN_CAMERA: { type: \"OPEN_CAMERA\" };\r\n  SAVE_SNAP: { type: \"SAVE_SNAP\"; data: CameraCapturedPicture };\r\n};\r\n\r\ntype ValueOf<T> = T[keyof T];\r\n\r\ntype Service = Interpreter<Context, any, ValueOf<Event>>;\r\n\r\nexport type Send = Service[\"send\"];\r\n\r\nconst Options = {\r\n  services: {\r\n    grantPermissions: \"grantPermissions\",\r\n    sendSnap: \"sendSnap\",\r\n  },\r\n  actions: {\r\n    setSnap: \"setSnap\",\r\n  },\r\n};\r\n\r\nexport const machine = createMachine<Context, ValueOf<Event>>(\r\n  {\r\n    id: \"machine\",\r\n    strict: true,\r\n    initial: \"init\",\r\n    context: {\r\n      hasPermissions: false,\r\n      snap: null,\r\n    },\r\n    states: {\r\n      init: {\r\n        invoke: {\r\n          src: Options.services.grantPermissions,\r\n          onDone: {\r\n            actions: assign<Context>({\r\n              hasPermissions: () => true,\r\n            }),\r\n            target: \"ready\",\r\n          },\r\n          onError: {\r\n            target: \"error\",\r\n          },\r\n        },\r\n      },\r\n      ready: {\r\n        on: {\r\n          OPEN_CAMERA: {\r\n            target: \"camera\",\r\n          },\r\n        },\r\n      },\r\n      camera: {\r\n        on: {\r\n          SAVE_SNAP: {\r\n            target: \"processing\",\r\n            actions: Options.actions.setSnap,\r\n          },\r\n        },\r\n      },\r\n      processing: {\r\n        invoke: {\r\n          src: Options.services.sendSnap,\r\n          onDone: {\r\n            target: \"result\",\r\n          },\r\n          onError: {\r\n            target: \"error\",\r\n          },\r\n        },\r\n      },\r\n      result: {},\r\n      error: {},\r\n    },\r\n  },\r\n  {\r\n    services: {\r\n      [Options.services.grantPermissions]: async () => {\r\n        const { status } = await Camera.requestPermissionsAsync();\r\n        return status === \"granted\";\r\n      },\r\n      [Options.services.sendSnap]: async (context: Context) => {\r\n        const data = await fetch(\"http://192.168.1.100:3001/image\", {\r\n          method: \"POST\",\r\n          headers: { \"content-type\": \"application/json; charset=utf-8\" },\r\n          body: JSON.stringify({ image: context.snap?.base64 }),\r\n        });\r\n\r\n        console.log(data);\r\n      },\r\n    },\r\n    actions: {\r\n      [Options.actions.setSnap]: assign<Context, Event[\"SAVE_SNAP\"]>({\r\n        snap: (_, event) => event.data,\r\n      }) as any,\r\n    },\r\n  }\r\n);\r\n"]},"metadata":{},"sourceType":"module"}